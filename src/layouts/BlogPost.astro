---
import type { CollectionEntry } from "astro:content";

import BaseLayout from "./Base.astro";
import BlogHero from "@/components/blog/Hero";

interface Props {
	post: CollectionEntry<"post">;
}

const { post } = Astro.props;
const {
	data: { title, description, ogImage, publishDate },
	slug,
} = post;
const socialImage = ogImage ?? `/og-image/${slug}.png`;
const articleDate = publishDate.toISOString();
const { headings } = await post.render();
---

<script>
	const scrollBtn = document.getElementById("to-top-btn") as HTMLButtonElement;
	const targetHeader = document.getElementById("blog-hero") as HTMLDivElement;

	function callback(entries: IntersectionObserverEntry[]) {
		entries.forEach((entry) => {
			// only show the scroll to top button when the heading is out of view
			scrollBtn.dataset.show = (!entry.isIntersecting).toString();
		});
	}

	scrollBtn.addEventListener("click", () => {
		document.documentElement.scrollTo({ top: 0, behavior: "smooth" });
	});

	const observer = new IntersectionObserver(callback);
	observer.observe(targetHeader);

	const anchorHeadings = document.querySelectorAll("h2, h3, h4, h5, h6");
	[...anchorHeadings]
		.filter((heading: Element) => heading.id !== "table-of-contents")
		.forEach((heading) => {
			const anchor = document.createElement("a");
			anchor.className = "group relative cursor-pointer";
			anchor.href = `#${heading.id}`;
			heading.parentNode!.insertBefore(anchor, heading);
			const linkIcon = document.createElement("div");
			linkIcon.className = "hidden group-hover:block";
			linkIcon.innerHTML = ` 
			<svg 
				xmlns="http://www.w3.org/2000/svg" 
				class="inline-block h-6 w-6 absolute bottom-0 -left-6 top-1.5" 
				aria-hidden="true" 
				focusable="false" 
				viewBox="0 0 24 24" 
				stroke-width="1" stroke="currentColor" 
				fill="none" 
				stroke-linecap="round" 
				stroke-linejoin="round">
					<path d="M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z">
			</svg>
		`;
			anchor.appendChild(linkIcon);
			anchor.appendChild(heading);
		});
</script>

<BaseLayout meta={{ title, description, articleDate, ogImage: socialImage }}>
	<div class="items-start gap-x-10 sm:flex">
		{
			!!headings.length && (
				<aside class="sticky top-20 order-2 -mr-32 hidden basis-64 lg:block">
					<h2 class="font-semibold" id="table-of-contents">
						Table of Contents
					</h2>
					<ul class="mt-4 text-xs">
						{headings.map(({ depth, slug, text }) => (
							<li class="hover:text-accent line-clamp-2">
								<a
									class={`block ${depth <= 2 ? "mt-3" : "mt-2 pl-3 text-[0.6875rem]"}`}
									href={`#${slug}`}
									aria-label={`Scroll to section: ${text}`}
								>
									<span>{"#".repeat(depth)}</span> {text}
								</a>
							</li>
						))}
					</ul>
				</aside>
			)
		}
		<article class="flex-grow break-words">
			<div id="blog-hero"><BlogHero content={post} /></div>
			<div
				class="prose-headings: prose prose-sm prose-cactus mt-12 prose-headings:font-semibold prose-headings:before:absolute prose-headings:before:-ml-4 prose-headings:before:text-accent"
			>
				<slot />
			</div>
		</article>
	</div>
	<button
		id="to-top-btn"
		class="z-90 fixed bottom-8 right-4 flex h-10 w-10 translate-y-28 items-center justify-center rounded-full border-2 border-transparent bg-zinc-200 text-3xl opacity-0 transition-all duration-300 hover:border-zinc-400 data-[show=true]:translate-y-0 data-[show=true]:opacity-100 dark:bg-zinc-700 sm:right-8 sm:h-12 sm:w-12"
		aria-label="Back to Top"
		data-show="false"
		><svg
			xmlns="http://www.w3.org/2000/svg"
			aria-hidden="true"
			focusable="false"
			fill="none"
			viewBox="0 0 24 24"
			stroke-width="2"
			stroke="currentColor"
			class="h-6 w-6"
		>
			<path stroke-linecap="round" stroke-linejoin="round" d="M4.5 15.75l7.5-7.5 7.5 7.5"></path>
		</svg>
	</button>
</BaseLayout>
